# helm repo add jetstack https://charts.jetstack.io
#
# helm show values jetstack/cert-manager >> cert-manager-values.yaml

installCRDs: true

global:
  leaderElection:
    namespace: "kube-system"
  rbac:
    create: true
    aggregateClusterRoles: true

fullnameOverride: "cert-manager"

#namespace: "cert-manager"
replicaCount: 1

# The maximum number of challenges that can be scheduled as 'processing' at once
maxConcurrentChallenges: 60
# resources:
  # requests:
  #   cpu: 10m
  #   memory: 32Mi
  # limits:
  #   cpu: 200m
  #   memory: 256Mi

serviceAccount:
  create: true
  # name: ""
  # annotations: {}
  # labels: {}
  automountServiceAccountToken: true
# Automounting API credentials for a particular pod
# automountServiceAccountToken: true

# When this flag is enabled, secrets will be automatically removed when the certificate resource is deleted
enableCertificateOwnerRef: false

dns01RecursiveNameservers: "1.1.1.1:53,9.9.9.9:53"
dns01RecursiveNameserversOnly: true
podDnsPolicy: None
podDnsConfig:
  nameservers:
    - 1.1.1.1
    - 9.9.9.9

extraArgs: []
  # - --controllers=*,-certificaterequests-approver

extraEnv: []
# - name: SOME_VAR
#   value: 'some value'

# resources:
  # requests:
  #   cpu: 10m
  #   memory: 32Mi

securityContext:
  runAsNonRoot: true
  seccompProfile:
    type: RuntimeDefault

# Container Security Context to be set on the controller component container
# ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true

nodeSelector:
  kubernetes.io/os: linux

livenessProbe:
  enabled: false
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 8

prometheus:
  enabled: true
  servicemonitor:
    enabled: true
    prometheusInstance: default
    targetPort: 9402
    path: /metrics
    interval: 60s
    scrapeTimeout: 30s
    labels: {}
    annotations: {}
    honorLabels: false
    endpointAdditionalProperties: {}
  # Note: Enabling both PodMonitor and ServiceMonitor is mutually exclusive, enabling both will result in a error.
  # podmonitor:
  #   enabled: true
  #   prometheusInstance: default
  #   path: /metrics
  #   interval: 60s
  #   scrapeTimeout: 30s
  #   labels: {}
  #   annotations: {}
  #   honorLabels: false
  #   endpointAdditionalProperties: {}

####################################
webhook:
  replicaCount: 1
  timeoutSeconds: 10

  nodeSelector:
    kubernetes.io/os: linux

  updateStrategy:
    type: RollingUpdate
    rollingUpdate: {}

  serviceAccount:
    create: true
    automountServiceAccountToken: true

  serviceType: ClusterIP
  loadBalancerIP:

  serviceMonitor:
    path: /metrics
    targetPort: 9402
    enabled: true
    interval: 60s
    scrapeTimeout: 30s
    honorLabels: false

  # resources:
  #   requests:
  #     cpu: 50m
  #     memory: 256Mi
  #     ephemeral-storage: 500Mi
  #   limits:
  #     cpu: 500m
  #     memory: 512Mi
  #     ephemeral-storage: 500Mi


####################################


cainjector:
  enabled: true
  replicaCount: 1

  # resources:
  #   requests:
  #     cpu: 10m
  #     memory: 32Mi
  #   limits:
  #     cpu: 200m
  #     memory: 256Mi